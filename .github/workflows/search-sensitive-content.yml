name: GitHub Code Search for Sensitive Content

on:
  workflow_dispatch:
    inputs:
      search_scope:
        description: '搜索范围 (user:username 或 org:orgname，留空搜索所有公开仓库)'
        required: false
        default: ''
      max_results:
        description: '最大结果数量'
        required: false
        default: '100'
      search_pattern:
        description: '搜索模式'
        required: false
        default: 'sk-ant-oat01-'
      file_extensions:
        description: '文件扩展名 (如: json,yaml,txt)'
        required: false
        default: 'json'
      use_regex:
        description: '使用正则表达式匹配完整密钥'
        required: false
        default: 'true'
        type: boolean
      force_notify:
        description: '强制发送通知'
        required: false
        default: 'false'
        type: boolean
  schedule:
    # 北京时间 8-16 点每小时运行 (UTC 0-8点)
    - cron: '0 0 * * *'   # 北京时间 08:00 (UTC 00:00)
    - cron: '0 1 * * *'   # 北京时间 09:00 (UTC 01:00)
    - cron: '0 2 * * *'   # 北京时间 10:00 (UTC 02:00)
    - cron: '0 3 * * *'   # 北京时间 11:00 (UTC 03:00)
    - cron: '0 4 * * *'   # 北京时间 12:00 (UTC 04:00)
    - cron: '0 5 * * *'   # 北京时间 13:00 (UTC 05:00)
    - cron: '0 6 * * *'   # 北京时间 14:00 (UTC 06:00)
    - cron: '0 7 * * *'   # 北京时间 15:00 (UTC 07:00)
    - cron: '0 8 * * *'   # 北京时间 16:00 (UTC 08:00)
    # 其他时间每4小时运行一次
    - cron: '0 12 * * *'  # 北京时间 20:00 (UTC 12:00)
    - cron: '0 16 * * *'  # 北京时间 00:00 (UTC 16:00)
    - cron: '0 20 * * *'  # 北京时间 04:00 (UTC 20:00)

env:
  TZ: Asia/Shanghai  # 设置时区为北京时间

jobs:
  github-code-search:
    runs-on: ubuntu-latest
    
    steps:
    - name: Show current time
      run: |
        echo "当前 UTC 时间: $(date -u)"
        echo "当前北京时间: $(TZ=Asia/Shanghai date)"
        echo "预期运行时间验证完成"
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install requests python-dateutil

    - name: Check previous results
      id: check_previous
      run: |
        echo "🔍 检查历史记录..."
        
        # 创建历史记录目录
        mkdir -p .github/scan_history
        
        # 方法1: 尝试从 Artifacts 恢复最近的历史
        echo "📁 尝试从 Artifacts 恢复历史..."
        
        # 获取最近的 workflow run ID（不使用 gh CLI，直接用 API）
        RECENT_RUN=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs?per_page=5&status=completed" \
          | jq -r '.workflow_runs[] | select(.name == "GitHub Code Search for Sensitive Content") | .id' | head -1)
        
        echo "最近的运行 ID: $RECENT_RUN"
        
        if [ ! -z "$RECENT_RUN" ] && [ "$RECENT_RUN" != "null" ]; then
          # 获取 artifacts
          ARTIFACTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs/$RECENT_RUN/artifacts")
          
          # 查找包含历史记录的 artifact
          ARTIFACT_URL=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name | startswith("github-code-search-results-")) | .archive_download_url' | head -1)
          
          if [ ! -z "$ARTIFACT_URL" ] && [ "$ARTIFACT_URL" != "null" ]; then
            echo "📦 找到 artifact，正在下载..."
            
            # 下载并解压 artifact
            curl -s -L -H "Authorization: token $GITHUB_TOKEN" "$ARTIFACT_URL" -o artifact.zip
            
            if [ -f "artifact.zip" ]; then
              unzip -q artifact.zip -d temp_artifact/
              
              # 恢复历史文件
              if [ -f "temp_artifact/.github/scan_history/last_scan_hash.txt" ]; then
                cp temp_artifact/.github/scan_history/last_scan_hash.txt .github/scan_history/
                echo "✅ 成功恢复主历史文件"
              fi
              
              # 恢复其他历史文件
              find temp_artifact/.github/scan_history/ -name "*.txt" -exec cp {} .github/scan_history/ \; 2>/dev/null || true
              
              # 清理
              rm -rf temp_artifact/ artifact.zip
            fi
          fi
        fi
        
        # 方法2: 从当前仓库文件中查找（如果历史文件被提交过）
        if [ ! -f ".github/scan_history/last_scan_hash.txt" ]; then
          echo "📋 尝试从仓库历史恢复..."
          
          # 检查是否有之前的历史文件
          if git log --oneline --all -- .github/scan_history/ >/dev/null 2>&1; then
            echo "发现历史提交记录"
            # 尝试恢复最近的历史文件
            git checkout HEAD~1 -- .github/scan_history/ 2>/dev/null || true
          fi
        fi
        
        # 方法3: 使用 repository variables 作为备份
        # GitHub Actions 可以设置 repository variables 来持久化数据
        
        # 读取历史哈希
        previous_hash=""
        if [ -f ".github/scan_history/last_scan_hash.txt" ]; then
          previous_hash=$(cat .github/scan_history/last_scan_hash.txt)
          echo "✅ 找到历史哈希: ${previous_hash:0:12}..."
        else
          echo "⚠️ 未找到历史记录"
        fi
        
        # 输出给下一步使用
        echo "previous_hash=$previous_hash" >> $GITHUB_OUTPUT
        
        # 调试信息
        echo "DEBUG: 历史目录内容:"
        ls -la .github/scan_history/ || echo "历史目录为空"

    - name: Run GitHub Code Search
      id: search
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SEARCH_SCOPE: ${{ github.event.inputs.search_scope }}
        MAX_RESULTS: ${{ github.event.inputs.max_results || '100' }}
        SEARCH_PATTERN: ${{ github.event.inputs.search_pattern || 'sk-ant-oat01-' }}
        FILE_EXTENSIONS: ${{ github.event.inputs.file_extensions || 'json' }}
        USE_REGEX: ${{ github.event.inputs.use_regex || 'true' }}
        PREVIOUS_HASH: ${{ steps.check_previous.outputs.previous_hash }}
      run: |
        python scripts/github_search.py

    - name: Generate reports
      run: |
        python scripts/generate_reports.py

    - name: Check for new findings
      id: check_new
      run: |
        python scripts/check_new_findings.py

    - name: Send Bark notification
      if: steps.check_new.outputs.has_new_findings == 'true' || github.event.inputs.force_notify == 'true'
      env:
        BARK_KEY: ${{ secrets.BARK_KEY }}
        BARK_SERVER: ${{ secrets.BARK_SERVER }}
      run: |
        python scripts/send_bark_notification.py

    - name: Update scan history
      run: |
        python scripts/update_scan_history.py

    - name: Upload search results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: github-code-search-results-${{ github.run_number }}
        path: |
          reports/
          .github/scan_history/
        retention-days: 30

    - name: Create security summary
      if: always()
      run: |
        python scripts/create_summary.py

    - name: Security recommendations
      if: always()
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔒 安全建议" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. **立即行动**: 如果在公开仓库中发现敏感内容，请立即更换相关的 API 密钥" >> $GITHUB_STEP_SUMMARY
        echo "2. **清理历史**: 使用 git filter-branch 或 BFG Repo-Cleaner 清理 Git 历史记录" >> $GITHUB_STEP_SUMMARY
        echo "3. **联系仓库所有者**: 如果敏感内容在他人仓库中，请联系仓库所有者" >> $GITHUB_STEP_SUMMARY
        echo "4. **启用监控**: 考虑使用 GitHub secret scanning 或其他安全工具" >> $GITHUB_STEP_SUMMARY
        echo "5. **预防措施**: 使用 pre-commit hooks 和 .gitignore 防止未来泄露" >> $GITHUB_STEP_SUMMARY
